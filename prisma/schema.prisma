// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum VoteType {
    UP
    DOWN
}

// model AuthUser {
//     id           String         @id @unique
//     auth_session AuthSession[]
//     auth_key     AuthKey[]
//     // here you can add custom fields for your user
//     // e.g. name, email, username, roles, etc.
//     Subreddit    Subreddit[]
//     Post         Post[]
//     PostVote     PostVote[]
//     CommentVote  CommentVote[]
//     Subscription Subscription[]
//     Comment      Comment[]

//     @@map("auth_user")
// }

// model AuthSession {
//     id             String   @id @unique
//     user_id        String
//     active_expires BigInt
//     idle_expires   BigInt
//     auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

//     @@index([user_id])
//     @@map("auth_session")
// }

// model AuthKey {
//     id              String   @id @unique
//     hashed_password String?
//     user_id         String
//     primary_key     Boolean
//     expires         BigInt?
//     auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

//     @@index([user_id])
//     @@map("auth_key")
// }

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    //other
    Subreddit    Subreddit[]
    Post         Post[]
    PostVote     PostVote[]
    CommentVote  CommentVote[]
    Subscription Subscription[]
    Comment      Comment[]
}

model Subreddit {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post[]

    Creator      User           @relation(fields: [creatorId], references: [id])
    creatorId    String
    Subscription Subscription[]

    @@index([name])
}

model Post {
    id        String   @id @default(cuid())
    title     String
    body      Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Subreddit   Subreddit @relation(fields: [subredditId], references: [id])
    subredditId String

    Author   User       @relation(fields: [authorid], references: [id])
    authorid String
    PostVote PostVote[]
    Comment  Comment[]
}

model PostVote {
    type VoteType

    User   User   @relation(fields: [userId], references: [id])
    userId String

    Post   Post   @relation(fields: [postId], references: [id])
    postId String

    @@unique([userId, postId])
    @@index([userId, postId])
}

model Comment {
    id        String   @id @default(cuid())
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Author User   @relation(fields: [userId], references: [id])
    userId String

    Post   Post   @relation(fields: [postId], references: [id])
    postId String

    CommentVote CommentVote[]
}

model CommentVote {
    type VoteType

    User   User   @relation(fields: [userId], references: [id])
    userId String

    Comment   Comment @relation(fields: [commentId], references: [id])
    commentId String

    @@id([userId, commentId])
    @@unique([userId, commentId])
}

model Subscription {
    User   User   @relation(fields: [userId], references: [id])
    userId String

    Subreddit   Subreddit @relation(fields: [subredditId], references: [id])
    subredditId String

    @@unique([userId, subredditId])
    @@index([userId, subredditId])
}
