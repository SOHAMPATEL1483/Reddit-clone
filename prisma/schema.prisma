// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum VoteType {
    UP
    DOWN
}

model AuthUser {
    id           String         @id @unique
    auth_session AuthSession[]
    auth_key     AuthKey[]
    // here you can add custom fields for your user
    // e.g. name, email, username, roles, etc.
    Subreddit    Subreddit[]
    Post         Post[]
    PostVote     PostVote[]
    CommentVote  CommentVote[]
    Subscription Subscription[]
    Comment      Comment[]

    @@map("auth_user")
}

model AuthSession {
    id             String   @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_session")
}

model AuthKey {
    id              String   @id @unique
    hashed_password String?
    user_id         String
    primary_key     Boolean
    expires         BigInt?
    auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("auth_key")
}

model Subreddit {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post[]

    Creator      AuthUser       @relation(fields: [creatorId], references: [id])
    creatorId    String
    Subscription Subscription[]

    @@index([name])
}

model Post {
    id        String   @id @default(cuid())
    title     String
    body      Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Subreddit   Subreddit @relation(fields: [subredditId], references: [id])
    subredditId String

    Author     AuthUser   @relation(fields: [authUserId], references: [id])
    authUserId String
    PostVote   PostVote[]
    Comment    Comment[]
}

model PostVote {
    type VoteType

    User   AuthUser @relation(fields: [userId], references: [id])
    userId String

    Post   Post   @relation(fields: [postId], references: [id])
    postId String

    @@unique([userId, postId])
    @@index([userId, postId])
}

model Comment {
    id        String   @id @default(cuid())
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Author     AuthUser @relation(fields: [authUserId], references: [id])
    authUserId String

    Post   Post   @relation(fields: [postId], references: [id])
    postId String

    CommentVote CommentVote[]
}

model CommentVote {
    type VoteType

    User   AuthUser @relation(fields: [userId], references: [id])
    userId String

    Comment   Comment @relation(fields: [commentId], references: [id])
    commentId String

    @@id([userId, commentId])
    @@unique([userId, commentId])
}

model Subscription {
    User   AuthUser @relation(fields: [userId], references: [id])
    userId String

    Subreddit   Subreddit @relation(fields: [subredditId], references: [id])
    subredditId String

    @@unique([userId, subredditId])
    @@index([userId, subredditId])
}
